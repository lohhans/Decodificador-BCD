// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/08/2018 18:34:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bcdDecoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bcdDecoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Entrada1;
reg Entrada2;
reg Entrada3;
reg Entrada4;
// wires                                               
wire A;
wire B;
wire C;
wire D;
wire E;
wire F;
wire G;

// assign statements (if any)                          
bcdDecoder i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.Entrada1(Entrada1),
	.Entrada2(Entrada2),
	.Entrada3(Entrada3),
	.Entrada4(Entrada4),
	.F(F),
	.G(G)
);
initial 
begin 
#20000 $finish;
end 

// Entrada1
initial
begin
	Entrada1 = 1'b0;
	Entrada1 = #8000 1'b1;
	Entrada1 = #8000 1'b0;
end 

// Entrada2
initial
begin
	repeat(2)
	begin
		Entrada2 = 1'b0;
		Entrada2 = #4000 1'b1;
		# 4000;
	end
	Entrada2 = 1'b0;
end 

// Entrada3
always
begin
	Entrada3 = 1'b0;
	Entrada3 = #2000 1'b1;
	#2000;
end 

// Entrada4
always
begin
	Entrada4 = 1'b0;
	Entrada4 = #1000 1'b1;
	#1000;
end 
endmodule

